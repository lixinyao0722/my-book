{"./":{"url":"./","title":"简介","keywords":"","body":"简介简介 我的git book，记录一些常用资料备忘。 "},"gitbook/gitbook-store.html":{"url":"gitbook/gitbook-store.html","title":"Git Book知识储备","keywords":"","body":"Git Book知识储备Git Book知识储备 "},"gitbook/git-book-basic.html":{"url":"gitbook/git-book-basic.html","title":"Git Book基本使用","keywords":"","body":"Git Book基本使用创建git book流程参考Git Book基本使用 创建git book流程 1 在Github上创建一个新仓库，这个仓库就是用来存放git book文件。 2 git clone项目到本地，同时创建gh-pages分支。 # 克隆代码到本地 git clone https://github.com/lixinyao0722/my-book # 创建gh-pages分支 git branch gh-pages # 切换分支 git checkout gh-pages # 将分支关联远程仓库，并发布 git push --set-upstream origin gh-pages 第一次创建分支push到远程时，需要添加--set-upstream参数设置远程的跟踪分支。 主要使用两个分支master分支：存放xxx.md等源码文件。gh-pages分支：存放通过gitbook生成的静态页面文件，同时该分支支持 {username}.github.io域名的访问。 3 安装gitbook命令行工具，gitbook-cli根据xxx.md源文件生成html文件或其他pdf格式等。 npm i -g gitbook-cli 4 安装gh-pages命令行工具，可以快速将某个目录直接发布到远程gh-pages分支上。 npm i -g gh-pages 5 在my-book目录下，需创建两个基本文件。 SUMMARY.md 特殊导航文件README.md 创建方式：5.1 手动创建5.2 gitbook cli创建 gitbook init 6 在master分支上md文件编写完毕后，可在本地启动临时服务器查看效果。 # 不加调试参数容易出现各种error gitbook serve . # 加上参数大大降低gitbook命令出错率 gitbook serve . --log=debug --debug 查看地址：http://localhost:4000 7 确认无误后，通过gitbook build生成html文件 # gitbook build {源文件夹} {目标文件夹} gitbook build . dist 8 通过gh-pages命令行将目标文件夹发布远程仓库 gh-pages -d dist dist/xxx 目录文件对应发布至 -> https://github.com/lixinyao0722/my-book/xxx 9 在线查看效果，地址http://lixinyao0722.github.io/my-book/index.html 参考 Gitbook命令行速览 gitbook入门教程.pdf "},"gitbook/book.json.html":{"url":"gitbook/book.json.html","title":"Git Book配置文件","keywords":"","body":"Git Book配置文件Git Book配置文件 在SUMMARY.md和README.md同级目录下，创建名为book.json的配置文件，该文件会被gitbook读取。 文件格式json，样例book.json如下。 { \"language\": \"zh-hans\", \"description\": \"This is such a great book!\", \"title\": \"Weber学习指南\", \"plugins\": [ \"anchor-navigation-ex\", \"expandable-chapters\", \"splitter\", \"edit-link\", \"prism\", \"prism-themes\", \"-highlight\", \"search-plus\", \"-lunr\", \"-search\", \"advanced-emoji\" ], \"pluginsConfig\": { \"prism\": { \"css\": [ \"prism-themes/themes/prism-xonokai.css\" ] }, \"anchor-navigation-ex\": { \"showLevel\": false, \"mode\": \"float\", \"float\": { \"showLevelIcon\": false, \"level1Icon\": \"fa fa-hand-o-right\", \"level2Icon\": \"fa fa-hand-o-right\", \"level3Icon\": \"fa fa-hand-o-right\" } }, \"edit-link\": { \"base\": \"https://github.com/lixinyao0722/my-book/blob/master\", \"label\": \"编辑本页\" } } } 字段 说明 author 作者 language 生成语言，默认en，zh-hans为简体中文 gitbook 检查gitbook版本是否满足要求 description 定义了书本的描述，默认是从 README（第一段）中提取的 title 生成静态html时网站的title，会显示在chrome的tab标签页上 plugins 应用插件列表。如：expandable-chapters支持左侧导航栏折叠 "},"gitbook/plugin.html":{"url":"gitbook/plugin.html","title":"Git Book插件","keywords":"","body":"Git Book插件插件使用方法默认带有的5个插件常用插件book.json参考Git Book插件 Git Book插件用于增强gitbook命令生成目标产物时能力。 插件使用方法 1.在book.json文件中添加配置项。若插件有额外配置，可另添加pluginsConfig。 { \"plugins\": [ \"expandable-chapters\", \"anchor-navigation-ex\" ], \"pluginsConfig\": { \"anchor-navigation-ex\": { \"showLevel\": false, \"mode\": \"float\", \"float\": { \"showLevelIcon\": false, \"level1Icon\": \"fa fa-hand-o-right\", \"level2Icon\": \"fa fa-hand-o-right\", \"level3Icon\": \"fa fa-hand-o-right\" } } } } 2.安装插件包，其实际是node_modules模块，两种方式如下。 gitbook install npm i gitbook-plugin-expandable-chapters --save 默认带有的5个插件 名称 功能 highlight 代码高亮 search 导航栏搜索功能 sharing 右上角分享功能 font-settings 字体设置面板 livereload 暂时未知 如果需要取消默认插件，方式如下。 { \"plugins\": [ \"-font-settings\" ] } 常用插件 book.json { \"plugins\": [ \"anchor-navigation-ex\", \"expandable-chapters\", \"splitter\", \"edit-link\", \"prism\", \"prism-themes\", \"-highlight\", \"search-plus\", \"-lunr\", \"-search\", \"advanced-emoji\" ], \"pluginsConfig\": { \"prism\": { \"css\": [ \"prism-themes/themes/prism-xonokai.css\" ] }, \"anchor-navigation-ex\": { \"showLevel\": false, \"mode\": \"float\", \"float\": { \"showLevelIcon\": false, \"level1Icon\": \"fa fa-hand-o-right\", \"level2Icon\": \"fa fa-hand-o-right\", \"level3Icon\": \"fa fa-hand-o-right\" } }, \"edit-link\": { \"base\": \"https://github.com/lixinyao0722/my-book/blob/master\", \"label\": \"编辑本页\" } } } expandable-chapters支持左侧导航栏折叠，配合SUMMARY.md一起使用。 anchor-navigation-ex添加Toc到侧边悬浮导航以及回到顶部按钮，配置参数点击 此处。 splitter使侧边栏的宽度可以自由调节 edit-link页面顶部出现编辑当前页面按钮 prism取代gitbook默认提供的代码高亮功能，使用方法如下。 { \"plugins\": [ \"prism\", \"prism-themes\", \"-highlight\" ] } search-plus左侧导航栏上的搜索框，支持全局模糊搜索中文，使用方法。 { \"plugins\": [ \"search-plus\", \"-lunr\", \"-search\" ] } advanced-emoji支持emoji图标，使用方式如:kissing_heart: ，更多图标大全请点击 此处 。 参考 https://www.npmjs.com/package/gitbook-plugin-toc GitBook 插件 https://zq99299.gitbooks.io/gitbook-guide/content/chapter/plugin.html "},"gitbook/fix_gitbook_compile.html":{"url":"gitbook/fix_gitbook_compile.html","title":"解决gitbook编译命令错误","keywords":"","body":"解决gitbook编译命令错误问题描述解决方法参考解决gitbook编译命令错误 问题描述 使用gitbook serve .或gitbook build . dist编译命令时，经常出现如下错误。 解决方法 修改文件copyPluginAssets.js 参考 gitbook/issues/1309 "},"github/github.html":{"url":"github/github.html","title":"Github相关","keywords":"","body":"Github相关Github相关 "},"github/github-static-domain.html":{"url":"github/github-static-domain.html","title":"Github静态域名","keywords":"","body":"Github静态域名1 创建和使用2 gh-pages与域名的关系Github静态域名 1 创建和使用 为了能够在github上发布静态网页，需要创建一个特殊的仓库。其名字为 {username}.github.io 我的是：lixinyao0722.github.io 创建该仓库之后，github便为你分配了域名lixinyao0722.github.io。在该仓库放置静态html文件，可通过域名进行访问。 例如 仓库文件概况 浏览器访问方式 2 gh-pages与域名的关系 任何一个项目，都可以创建特殊分支gh-pages，该分支上的静态页面也能通过上述域名访问。 仓库名称：my-book分支：gh-pages页面：index.html访问地址：https://lixinyao0722.github.io/my-book/index.html "},"umall/umall.html":{"url":"umall/umall.html","title":"鹅漫","keywords":"","body":"鹅漫鹅漫 "},"umall/umall-web.html":{"url":"umall/umall-web.html","title":"鹅漫商城","keywords":"","body":"鹅漫商城鹅漫商城 "},"umall/umall-admin.html":{"url":"umall/umall-admin.html","title":"鹅漫后台管理系统","keywords":"","body":"鹅漫后台管理系统鹅漫后台管理系统 "},"phpstorm/phpstorm.html":{"url":"phpstorm/phpstorm.html","title":"PhpStorm","keywords":"","body":"PhpStorm相关PhpStorm相关 "},"phpstorm/plugins/plugins.html":{"url":"phpstorm/plugins/plugins.html","title":"PhpStorm插件","keywords":"","body":"PhpStorm插件PhpStorm插件 "},"phpstorm/plugins/markdown-navigator.html":{"url":"phpstorm/plugins/markdown-navigator.html","title":"破解Markdown-Navigator","keywords":"","body":"破解Markdown-Navigator简介问题破解方案参考破解Markdown-Navigator 简介 Markdown-Navigator可谓是PhpStrom内置markdown插件的升级版，支持更多工具快捷方式和功能点，如： 加强版工具栏 粗体 斜体 删除线 行内代码高亮 插入链接 有序无序列表 任务列表 插入表格，插入删除行、列 格式化表格 格式换文档 问题 默认下载版本是付费的，作为一个普通码农> 破解方案 1.到此处下载两个class文件。 LicenseAgent.classLicenseRequest.class 2.找到Markdown-Navigator安装目录下的idea-multimarkdown.jar。 C:/Users/{username}/.PhpStorm2018.1/config/plugins/idea-multimarkdown/lib 3.用压缩软件不解压打开jar包，替换上面两个class文件。 4.重启PhpStorm即可，此时Markdown-Navigator插件已破解，所有功能开启。 参考 CrazyBunQnQ/multimarkdown "},"vpn/vpn.html":{"url":"vpn/vpn.html","title":"VPN科学上网","keywords":"","body":"VPN科学上网本地搭建代理服务器方式参考VPN科学上网 本地搭建代理服务器方式 下载并解压Agent0.zip。 启动goproxy.exe，即在本地127.0.0.1:8087端口搭建了代理服务器。 请求转发到本地8087端口即可。 参考 Chrome一键翻墙包 "},"performance/performance.html":{"url":"performance/performance.html","title":"性能指标","keywords":"","body":"性能指标性能指标 "},"performance/ab.html":{"url":"performance/ab.html","title":"压测工具 - Apache ab","keywords":"","body":"压测工具 - Apache ab安装方法使用方法ab命令参数实战使用测试结果参数详解压测工具 - Apache ab Apache ab全称ApacheBench，有Apache提供的一个轻量级压测工具，windows、linux下均有对应版本。 安装方法 windows 到Apache Http Server官网下载集成软件包 XAMPP 或 WampServer。安装完成后，在%installPath%/apache/bin找到ab.exe。 linux 到Apache Http Server官网下载下载httpd-{version}.tar.gz包进行源码安装。安装完毕后在%installPath%/apache/bin找到ab。 使用方法 以linux下ab为例，windows使用同理。 ab命令参数 上图红框标记为ab常用参数，含义如下： -n 请求总数。 -c 并发数。 -H 添加任意Http请求头，包括cookie、user agent等，可添加多个。 -p 当压测post请求时，指定post数据文件路径。 -T 当压测post请求时，指定post数据格式，application/json或application/x-www-form-urlencoded。 实战使用 压测对象为鹅漫U品页面和cgi。 样例1 - 压测GET请求 ./ab -c 800 -n 10000 -k -H \"Cookie: uin=o0502383519; skey=@P1crrtHu7;\" -H \"Accept-Encoding: gzip, deflate\" \"http://mall.vip.qq.com/?debug=1&mqqRelogin=false\" http://mall.vip.qq.com/?debug=1&mqqRelogin=false 页面从cookie中取出参数校验用户登录态，故通过-H参数指定用户cookie。另一-H参数则指定了客户端可接收编码格式gzip，目的让Server对响应数据进行压缩。-k即在http请求头插入Connection: keep-alive。命令共模拟800个用户同时请求页面10000次。 样例2 - 压测POST请求 ./ab -T \"application/json;charset=UTF-8\" -H \"User-Agent: Mozilla/5.0 (iPhone; CPU iPhone OS 9_1 like Mac OS X) AppleWebKit/601.1.46 (KHTML, like Gecko) Version/4.0 Chrome/37.0.0.0 Mobile MQQBrowser/6.8 TBS/036823 Safari/537.36 V1_AND_SQ_6.5.3_398_YYB_D QQ/6.5.3.2855 NetType/WIFI WebP/0.3.0 Pixel/1080\" -p post.json -c 800 -n 10000 \"http://uapi.vip.qq.com/Api/api.brand.condition\" 通过-T参数指定了post请求参数编码格式为application/json，-p指定post请求参数文件路径post.json，post.json文件内容如下。 {\"brand_id\": 16, \"page\": 1, \"per_page\": 10} 测试结果参数详解 [root@Tencent-SNG /usr/local/apache/bin]# ./ab -T \"application/json;charset=UTF-8\" -H \"X-UmallAPI-Authorization: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1aWQiOjE0MywiZXhwIjoxNTI2NDQwMTgxLCJwbGF0Zm9ybSI6IiJ9.nYdx1b9RZj1H6ap8_Gkp0UBGj785z7xCZsGtZDtFy9U\" -p post.json -c 400 -n 4000 \"http://uapi.vip.qq.com/Api/api.cart.seeRecommend\" This is ApacheBench, Version 2.3 Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/ Licensed to The Apache Software Foundation, http://www.apache.org/ Benchmarking uapi.vip.qq.com (be patient) Completed 400 requests Completed 800 requests Completed 1200 requests Completed 1600 requests Completed 2000 requests Completed 2400 requests Completed 2800 requests Completed 3200 requests Completed 3600 requests Completed 4000 requests Finished 4000 requests Server Software: nginx Server Hostname: uapi.vip.qq.com Server Port: 80 Document Path: /Api/api.cart.seeRecommend Document Length: 27483 bytes Concurrency Level: 400 Time taken for tests: 43.532 seconds #本次测试共消耗时间 Complete requests: 4000 #完成请求数 Failed requests: 0 #失败请求数 Total transferred: 110620000 bytes Total body sent: 1356000 HTML transferred: 109932000 bytes Requests per second: 91.89 [#/sec] (mean) #[核心指标] 吞吐率，表示每秒处理的请求数 Time per request: 4353.157 [ms] (mean) #[核心指标] 每个用户平均等待的时间，等于 Time taken for tests / (Complete requests / Concurrency Level) Time per request: 10.883 [ms] (mean, across all concurrent requests) #[核心指标] 服务器平均请求处理的时间，为Requests per second吞吐率的倒数 Transfer rate: 2481.59 [Kbytes/sec] received 30.42 kb/s sent 2512.01 kb/s total Connection Times (ms) min mean[+/-sd] median max Connect: 4 5 0.2 5 6 Processing: 323 4022 2834.2 3500 13962 Waiting: 318 4017 2834.2 3496 13957 Total: 328 4027 2834.2 3505 13967 Percentage of the requests served within a certain time (ms) 50% 3505 66% 4931 75% 5794 80% 6366 90% 7991 95% 9818 98% 10857 99% 12236 100% 13967 (longest request) "}}